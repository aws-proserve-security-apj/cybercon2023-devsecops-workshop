Resources:
  devsecopsdb38B2E622:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        KMSMasterKeyId: !Ref DynamoDbTableKmsKey
        SSEEnabled: true
        SSEType: KMS
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      'aws:cdk:path': AppsyncWafStack/devsecops-db/Resource
  DynamoDbTableKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: '*'
          - Effect: Allow
            Principal:
              AWS:  !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:Encrypt
              - kms:Decrypt
            Resource: '*'
            Condition:
              StringEquals:
                kms:CallerAccount: !Ref AWS::AccountId
                kms:ViaService: !Sub dynamodb.${AWS::Region}.amazonaws.com
  devsecopsup:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
    Metadata:
      'aws:cdk:path': AppsyncWafStack/devsecops-up
  devsecopsclient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      UserPoolId: !Ref devsecopsup
      AllowedOAuthFlows:
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - aws.cognito.signin.user.admin
        - openid
        - profile
      CallbackURLs:
        - 'devsecops://signin'
      ClientName: devsecops
      GenerateSecret: false
      LogoutURLs:
        - 'devsecops://signout'
      SupportedIdentityProviders:
        - COGNITO
    Metadata:
      'aws:cdk:path': AppsyncWafStack/devsecops-client
  devsecopsidp:
    Type: 'AWS::Cognito::IdentityPool'
    Properties:
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref devsecopsclient
          ProviderName: !GetAtt 
            - devsecopsup
            - ProviderName
    Metadata:
      'aws:cdk:path': AppsyncWafStack/devsecops-idp
  devsecopsunauthRole994CB4A9:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref devsecopsidp
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
        Version: 2012-10-17
      RoleName: unAuthRole
    Metadata:
      'aws:cdk:path': AppsyncWafStack/devsecops-unauthRole/Resource
  devsecopsauthroleEE0D2184:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref devsecopsidp
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
        Version: 2012-10-17
      RoleName: authRole
    Metadata:
      'aws:cdk:path': AppsyncWafStack/devsecops-authrole/Resource
  devsecopsroles:
    Type: 'AWS::Cognito::IdentityPoolRoleAttachment'
    Properties:
      IdentityPoolId: !Ref devsecopsidp
      Roles:
        authenticated: !GetAtt 
          - devsecopsauthroleEE0D2184
          - Arn
        unauthenticated: !GetAtt 
          - devsecopsunauthRole994CB4A9
          - Arn
    Metadata:
      'aws:cdk:path': AppsyncWafStack/devsecops-roles
  api:
    Type: 'AWS::AppSync::GraphQLApi'
    Properties:
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      Name: devsecops
      LogConfig: 
        CloudWatchLogsRoleArn: !GetAtt 
          - devsecopsunauthRole994CB4A9
          - Arn
        FieldLogLevel: ALL
      UserPoolConfig:
        AwsRegion: !Ref 'AWS::Region'
        DefaultAction: ALLOW
        UserPoolId: !Ref devsecopsup
    Metadata:
      'aws:cdk:path': AppsyncWafStack/api
      
  devsecopsschema:
    Type: 'AWS::AppSync::GraphQLSchema'
    Properties:
      ApiId: !GetAtt 
        - api
        - ApiId
      Definition: |-
        type Todo {
          id: ID!
          name: String!
          description: String
        }

        enum ModelSortDirection {
          ASC
          DESC
        }

        type ModelTodoConnection {
          items: [Todo]
          nextToken: String
        }

        input ModelStringInput {
          ne: String
          eq: String
          le: String
          lt: String
          ge: String
          gt: String
          contains: String
          notContains: String
          between: [String]
          beginsWith: String
          attributeExists: Boolean
          attributeType: ModelAttributeTypes
          size: ModelSizeInput
        }

        input ModelIDInput {
          ne: ID
          eq: ID
          le: ID
          lt: ID
          ge: ID
          gt: ID
          contains: ID
          notContains: ID
          between: [ID]
          beginsWith: ID
          attributeExists: Boolean
          attributeType: ModelAttributeTypes
          size: ModelSizeInput
        }

        input ModelIntInput {
          ne: Int
          eq: Int
          le: Int
          lt: Int
          ge: Int
          gt: Int
          between: [Int]
          attributeExists: Boolean
          attributeType: ModelAttributeTypes
        }

        input ModelFloatInput {
          ne: Float
          eq: Float
          le: Float
          lt: Float
          ge: Float
          gt: Float
          between: [Float]
          attributeExists: Boolean
          attributeType: ModelAttributeTypes
        }

        input ModelBooleanInput {
          ne: Boolean
          eq: Boolean
          attributeExists: Boolean
          attributeType: ModelAttributeTypes
        }

        input ModelSizeInput {
          ne: Int
          eq: Int
          le: Int
          lt: Int
          ge: Int
          gt: Int
          between: [Int]
        }

        input ModelTodoFilterInput {
          id: ModelIDInput
          name: ModelStringInput
          description: ModelStringInput
          and: [ModelTodoFilterInput]
          or: [ModelTodoFilterInput]
          not: ModelTodoFilterInput
        }

        type Query {
          getTodo(id: ID!): Todo
          listTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection
        }

        input CreateTodoInput {
          id: ID
          name: String!
          description: String
        }

        type Mutation {
          createTodo(input: CreateTodoInput!, condition: ModelTodoConditionInput): Todo
        }

        input ModelTodoConditionInput {
          name: ModelStringInput
          description: ModelStringInput
          and: [ModelTodoConditionInput]
          or: [ModelTodoConditionInput]
          not: ModelTodoConditionInput
        }

        enum ModelAttributeTypes {
          binary
          binarySet
          bool
          list
          map
          number
          numberSet
          string
          stringSet
          _null
        }
    Metadata:
      'aws:cdk:path': AppsyncWafStack/devsecops-schema
  devsecopsdbRoleBA7ABA7B:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
        Version: 2012-10-17
    Metadata:
      'aws:cdk:path': AppsyncWafStack/devsecops-dbRole/Resource
  devsecopsdbRoleDefaultPolicy9DD0C4BF:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'dynamodb:PutItem'
              - 'dynamodb:QueryItem'
              - 'dynamodb:GetItem'
              - 'dynamodb:Scan'
              - 'dynamodb:Query'
            Effect: Allow
            Resource: !GetAtt 
              - devsecopsdb38B2E622
              - Arn
        Version: 2012-10-17
      PolicyName: devsecopsdbRoleDefaultPolicy9DD0C4BF
      Roles:
        - !Ref devsecopsdbRoleBA7ABA7B
    Metadata:
      'aws:cdk:path': AppsyncWafStack/devsecops-dbRole/DefaultPolicy/Resource
  devsecopsdynamodb:
    Type: 'AWS::AppSync::DataSource'
    Properties:
      ApiId: !GetAtt 
        - api
        - ApiId
      Name: dynamodb
      Type: AMAZON_DYNAMODB
      Description: devsecops dynamo datasource
      DynamoDBConfig:
        AwsRegion: !Ref 'AWS::Region'
        TableName: !Ref devsecopsdb38B2E622
      ServiceRoleArn: !GetAtt 
        - devsecopsdbRoleBA7ABA7B
        - Arn
    Metadata:
      'aws:cdk:path': AppsyncWafStack/devsecops-dynamodb
  mutationCreateTodoReqRes:
    Type: 'AWS::AppSync::Resolver'
    Properties:
      ApiId: !GetAtt 
        - api
        - ApiId
      FieldName: createTodo
      TypeName: Mutation
      DataSourceName: dynamodb
      RequestMappingTemplate: >-
        ## [Start] Prepare DynamoDB PutItem Request. **

        $util.qr($context.args.input.put("createdAt",
        $util.defaultIfNull($ctx.args.input.createdAt,
        $util.time.nowISO8601())))

        $util.qr($context.args.input.put("updatedAt",
        $util.defaultIfNull($ctx.args.input.updatedAt,
        $util.time.nowISO8601())))

        $util.qr($context.args.input.put("__typename", "Todo"))

        #set( $condition = {
          "expression": "attribute_not_exists(#id)",
          "expressionNames": {
              "#id": "id"
          }
        } )

        #if( $context.args.condition )
          #set( $condition.expressionValues = {} )
          #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )
          $util.qr($condition.put("expression", "($condition.expression) AND $conditionFilterExpressions.expression"))
          $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))
          $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))
        #end

        #if( $condition.expressionValues && $condition.expressionValues.size()
        == 0 )
          #set( $condition = {
          "expression": $condition.expression,
          "expressionNames": $condition.expressionNames
        } )

        #end

        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
          "id":   $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.args.input.id, $util.autoId()))
        } #end,
          "attributeValues": $util.dynamodb.toMapValuesJson($context.args.input),
          "condition": $util.toJson($condition)
        }

        ## [End] Prepare DynamoDB PutItem Request. **
      ResponseMappingTemplate: $util.toJson($ctx.result)
    DependsOn:
      - devsecopsdynamodb
    Metadata:
      'aws:cdk:path': AppsyncWafStack/mutationCreateTodoReqRes
  QueryTodoReqRes:
    Type: 'AWS::AppSync::Resolver'
    Properties:
      ApiId: !GetAtt 
        - api
        - ApiId
      FieldName: getTodo
      TypeName: Query
      DataSourceName: dynamodb
      RequestMappingTemplate: |-
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
          "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
        } #end
        }
      ResponseMappingTemplate: $util.toJson($ctx.result)
    DependsOn:
      - devsecopsdynamodb
    Metadata:
      'aws:cdk:path': AppsyncWafStack/QueryTodoReqRes
  
  devsecopswafassoc:
    Type: 'AWS::WAFv2::WebACLAssociation'
    Properties:
      ResourceArn: !GetAtt 
        - api
        - Arn
      WebACLArn: "arn:aws:wafv2:us-east-1:549319014430:global/webacl/waf-security-automation/692db26e-385d-4156-b9f6-ed160261c8ed"
    DependsOn:
      - api
    Metadata:
      'aws:cdk:path': AppsyncWafStack/devsecops-waf-assoc
  CDKMetadata:
    Type: 'AWS::CDK::Metadata'
    Properties:
      Modules: >-
        aws-cdk=1.68.0,@aws-cdk/assets=1.70.0,@aws-cdk/aws-applicationautoscaling=1.70.0,@aws-cdk/aws-appsync=1.70.0,@aws-cdk/aws-autoscaling-common=1.70.0,@aws-cdk/aws-cloudwatch=1.70.0,@aws-cdk/aws-codeguruprofiler=1.70.0,@aws-cdk/aws-cognito=1.70.0,@aws-cdk/aws-dynamodb=1.70.0,@aws-cdk/aws-ec2=1.70.0,@aws-cdk/aws-events=1.70.0,@aws-cdk/aws-iam=1.70.0,@aws-cdk/aws-kms=1.70.0,@aws-cdk/aws-lambda=1.70.0,@aws-cdk/aws-logs=1.70.0,@aws-cdk/aws-s3=1.70.0,@aws-cdk/aws-s3-assets=1.70.0,@aws-cdk/aws-sqs=1.70.0,@aws-cdk/aws-ssm=1.70.0,@aws-cdk/aws-wafv2=1.70.0,@aws-cdk/cloud-assembly-schema=1.70.0,@aws-cdk/core=1.70.0,@aws-cdk/custom-resources=1.70.0,@aws-cdk/cx-api=1.70.0,@aws-cdk/region-info=1.70.0,jsii-runtime=node.js/v13.8.0
    Metadata:
      'aws:cdk:path': AppsyncWafStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Conditions:
  CDKMetadataAvailable: !Or 
    - !Or 
      - !Equals 
        - !Ref 'AWS::Region'
        - ap-east-1
      - !Equals 
        - !Ref 'AWS::Region'
        - ap-northeast-1
      - !Equals 
        - !Ref 'AWS::Region'
        - ap-northeast-2
      - !Equals 
        - !Ref 'AWS::Region'
        - ap-south-1
      - !Equals 
        - !Ref 'AWS::Region'
        - ap-southeast-1
      - !Equals 
        - !Ref 'AWS::Region'
        - ap-southeast-2
      - !Equals 
        - !Ref 'AWS::Region'
        - ca-central-1
      - !Equals 
        - !Ref 'AWS::Region'
        - cn-north-1
      - !Equals 
        - !Ref 'AWS::Region'
        - cn-northwest-1
      - !Equals 
        - !Ref 'AWS::Region'
        - eu-central-1
    - !Or 
      - !Equals 
        - !Ref 'AWS::Region'
        - eu-north-1
      - !Equals 
        - !Ref 'AWS::Region'
        - eu-west-1
      - !Equals 
        - !Ref 'AWS::Region'
        - eu-west-2
      - !Equals 
        - !Ref 'AWS::Region'
        - eu-west-3
      - !Equals 
        - !Ref 'AWS::Region'
        - me-south-1
      - !Equals 
        - !Ref 'AWS::Region'
        - sa-east-1
      - !Equals 
        - !Ref 'AWS::Region'
        - us-east-1
      - !Equals 
        - !Ref 'AWS::Region'
        - us-east-2
      - !Equals 
        - !Ref 'AWS::Region'
        - us-west-1
      - !Equals 
        - !Ref 'AWS::Region'
        - us-west-2
